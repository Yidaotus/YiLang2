// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Tag           Tag[]
  Word          Word[]
  Document      Document[]
  Language      Language[]
  LookupSource  LookupSource[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LookupSource {
  id         String    @id @default(cuid())
  name       String
  url        String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  Language   Language? @relation(fields: [userId, languageId], references: [userId, id])
  languageId String?

  @@unique(fields: [userId, id], name: "userLookupSourceId")
}

model Language {
  id            String         @default(cuid())
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lookupSources LookupSource[]
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  Word          Word[]
  Document      Document[]
  Tag           Tag[]

  @@id(fields: [userId, id], name: "userLanguageId")
}

model Tag {
  id         String        @id @default(cuid())
  color      String
  name       String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  words      TagsOnWords[]
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  language   Language      @relation(fields: [userId, languageId], references: [userId, id])
  languageId String
  Document   Document[]
  documentId String?

  @@unique(fields: [userId, id], name: "userTagId")
}

model Word {
  id             String        @id @default(cuid())
  word           String
  translation    String
  spelling       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  comment        String?
  documentId     String?
  sourceDocument Document?     @relation(fields: [documentId], references: [id])
  tags           TagsOnWords[]
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  language       Language      @relation(fields: [userId, languageId], references: [userId, id])
  languageId     String

  @@unique(fields: [userId, id], name: "userWordId")
}

model TagsOnWords {
  tag            Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId          String
  word           Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordId         String
  assignedAt     DateTime @default(now())
  languageId     String?
  lookupSourceId String?

  @@id([tagId, wordId])
}

model Document {
  id                 String   @id @default(cuid())
  serializedDocument String?
  title              String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  Word               Word[]
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  language           Language @relation(fields: [userId, languageId], references: [userId, id])
  languageId         String
  tags               Tag[]

  @@unique(fields: [userId, id], name: "userDocumentId")
}
